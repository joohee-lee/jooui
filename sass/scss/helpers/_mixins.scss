

//a11y (blind text) 
@mixin a11y{
	visibility: hidden;
	overflow: hidden;
	position: absolute;
	left: 0; top: 0;
	width: 1px; height: 1px;
	font-size: 0;
	clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
}

//clearfix
@mixin clearfix{
	&:after{
		content: '';
		clear: both;
		display: block;
	}
}

//ellipsis
@mixin ellipsis{
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

//ellipsis-line
@mixin ellipsis-line($line){
	overflow: hidden;
	text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
	word-wrap: break-word;
}

//placeholder
//@include input-placeholder { color: #ddd; }

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}


//border-radius
@mixin border-radius($radii){
	//border-radius: $radii
	@include prefixer( border-radius, $radii, webkit moz);
}

@mixin border-top-radius($radii) {
  //border-top-left-radius: $radii;
  //border-top-right-radius: $radii;
  @include prefixer( border-top-left, $radii, webkit moz);
  @include prefixer( border-top-right, $radii, webkit moz);
}

@mixin border-right-radius($radii) {
  //border-bottom-right-radius: $radii;
  //border-top-right-radius: $radii;
  @include prefixer( border-bottom-right, $radii, webkit moz);
  @include prefixer( border-top-right, $radii, webkit moz);
}

@mixin border-bottom-radius($radii) {
  //border-bottom-left-radius: $radii;
  //border-bottom-right-radius: $radii;
  @include prefixer( border-bottom-left, $radii, webkit moz);
  @include prefixer( border-bottom-right, $radii, webkit moz);
}


@mixin border-left-radius($radii) {
  //border-bottom-left-radius: $radii;
  //border-top-left-radius: $radii;
  @include prefixer( border-bottom-left, $radii, webkit moz);
  @include prefixer( border-top-left, $radii, webkit moz);
}


//transition
/*
$transition-base: all .2s ease-in-out !default;
$transition-fade: opacity .15s linear !default;
$transition-collapse: height .35s ease !default;

@mixin transition($transition...) {
	@if is--transitions {

		@if length($transition) == 0 {
			@include prefixer( transition, $transition-base, webkit);
		}@else{
			@include prefixer( transition, $transition, webkit);
		}

	}
}
*/

//opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//Prefix (bourbon)
@mixin prefixer( $property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{"-" + $prefix + "-" + $property}: $value;
  }
  #{$property}: $value;
}

//box-sizing 
@mixin box-sizing( $box-val ){
	@include prefixer(box-sizing, $box-val, webkit moz);
}

//flex
@mixin flex( $flex-val ){
	@include prefixer(flex, $flex-val, webkit moz ms);
}

//box-shadow
@mixin box-shadow( $prop ){
	@include prefixer(box-shadow, $prop, webkit moz);
}

//tarnsition
@mixin transition( $prop){
	@include prefixer(transition, $prop, webkit moz o);
}

@mixin transition-duration($time: 0.5s){
	@include prefix(transition-duration, $time, webkit moz o);
}

@mixin transition-delay($time){
	@include prefix(transition-delay, $time, webkit moz o);
}

//transform 
@mixin transform( $prop){
	@include prefixer(transform, $prop, webkit moz o);
}

@mixin translate3d($x, $y, $z){
    @include prefix(transform, translate3d($x, $y, $z), webkit moz ms o);
    // -webkit-transform : translate3d($x, $y, $z);
    // -moz-transform : translate3d($x, $y, $z);
    // -o-transform : translate3d($x, $y, $z);
    // transform : translate3d($x, $y, $z);
}

//keyframe
/*
// use of keyframes mixin
@include keyframes(bgcolor) {
  0% {
    background-color: #ffccf2;
  }
  50% {
    background-color: #ccffcc;
  }
  100% {
    background-color: #ccffff;
  } 
}
*/
@mixin keyframes ($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }

    @-moz-keyframes #{$animation_name} {
        @content;
    }

    @-o-keyframes #{$animation_name} {
        @content;
    }

    @keyframes #{$animation_name} {
        @content;
    }
}

//animation
/*
	Example usage: 
    @include animation(changecolour, 10s, cubic-bezier(.645,.045,.355,1))
 */
 
/*
animation - shortnand property 
animation-name 
animation-duration 
animation-timing-function (linear, ease-in-out, steps(4, end),cubic-bezier(0.1, -0.6, 0.2, 0) ) 
animation-delay 3s , 2.1s 480ms
animation-iteration-count (0, 1, ..infinite)
animation-direction (alternate, reverse, normal)
animation-fill-mode (none, forwards, backwards,  both)
animation-play-state (paused, running )
*/
@mixin animation( $animation, $duration, $timingfunction, $delay, $count,
 $direction:normal, $fillmode:none, $playstate:running) {

	-webkit-animation-name: $animation;
	-webkit-animation-duration: $duration;
	-webkit-animation-timing-function: $timingfunction;
	-webkit-animation-delay: $delay;
    -webkit-animation-iteration-count: $count;
    -webkit-animation-direction: $direction;
    -webkit-animation-fill-mode: $fillmode;
	-webkit-animation-play-state: $playstate;

	-moz-animation-name: $animation;
	-moz-animation-duration: $duration;
	-moz-animation-timing-function: $timingfunction;
	-moz-animation-delay: $delay;
    -moz-animation-iteration-count: $count;
    -moz-animation-direction: $direction;
    -moz-animation-fill-mode: $fillmode;
	-moz-animation-play-state: $playstate;

	-o-animation-name: $animation;
	-o-animation-duration: $duration;
	-o-animation-timing-function: $timingfunction;
	-o-animation-delay: $delay;
    -o-animation-iteration-count: $count;
    -o-animation-direction: $direction;
    -o-animation-fill-mode: $fillmode;
	-o-animation-play-state: $playstate;

	animation-name: $animation;
	animation-duration: $duration;
	animation-timing-function: $timingfunction;
	animation-delay: $delay;
    animation-iteration-count: $count;
    animation-direction: $direction;
    animation-fill-mode: $fillmode;
	animation-play-state: $playstate;
}


//breakpoints - mediaquery 
//xs, sm, md, lg , xl 
$MQs: true;

@mixin bp-max($point) {
  
  $bp-xs: "(max-width: 320px)";
  $bp-sm: "(max-width: 576px)";
  $bp-md: "(max-width: 768px)";
  $bp-lg: "(max-width: 992px)";
  $bp-xl: "(max-width: 1200px)";

@if($MQs){	

		@if $point == bp-xl {
		@media #{$bp-xl} { @content; }
		}
		@else if $point == bp-lg {
		@media #{$bp-lg} { @content; }
		}
		@else if $point == bp-md {
		@media #{$bp-md}  { @content; }
		}
		@else if $point == bp-sm {
		@media #{$bp-sm}  { @content; }
		}
		@else if $point == bp-xs {
		@media #{$bp-xs}  { @content; }
		}
 	}
}

@mixin bp-min($point) {
  
  $bp-xs: "(min-width: 0px)";
  $bp-sm: "(min-width: 576px)";
  $bp-md: "(min-width: 768px)";
  $bp-lg: "(min-width: 992px)";
  $bp-xl: "(min-width: 1200px)";

@if($MQs){	
	
		@if $point == bp-xl {
		@media #{$bp-xl} { @content; }
		}
		@else if $point == bp-lg {
		@media #{$bp-lg} { @content; }
		}
		@else if $point == bp-md {
		@media #{$bp-md}  { @content; }
		}
		@else if $point == bp-sm {
		@media #{$bp-sm}  { @content; }
		}
		@else if $point == bp-xs {
		@media #{$bp-xs}  { @content; }
		}
 	}
}

//min-max
@mixin bp-between($min, $max) {
	@if($MQs){
		 @media (min-width: $min) and (max-width: $max) {
		    @content;
		}
	}	  
}


//sass syntex: map_has_key , map_get;
$breakpoints: (
    "xs":  400px, //phone
    "s":   480px, //phone-wide
    "sm":  560px, //phablet
    "m":   640px, //tablet-small
    "md":  768px, //tablet
    "lg":  1024px, //tablet-wide
    "xl":  1248px, //desktop
    "xxl": 1440px  //desktop-wide
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        
        $width: map_get($breakpoints, $width);
        
        @if $type == max {
            $width: $width - 1px;
        }

        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

//vw mixin add 

// Mixin
@mixin fontsize-vw($size, $type, $width) {
  
  $width: map_get($breakpoints, $width);	
  
  font-size: getVw($size);
  // Prevent font-size from getting too big
  @media only screen and (#{$type}-width: $width) {
    font-size: $size;
  }
}


//@include fontsize-vw(72px, min, xxl)

//z-index
$z-indexes: (
	"zindex-dropdown":          1000,
	"zindex-sticky":            1020,
	"zindex-fixed":             1030,
	"zindex-modal-backdrop":    1040,
	"zindex-modal":             1050,
	"zindex-popover":           1060,
	"zindex-tooltip":           1070,
	"zindex-loading" :          1100
);

//z-index mixin
@mixin z-index($key) {
	
	$z-index : map_get($z-indexes, $key);
	z-index: $z-index;
}

//@inlcude z-index(modal)

//css3 prefix
@mixin css3-prefix($prop, $value) {
   -webkit-#{$prop}: #{$value};
   -moz-#{$prop}: #{$value};
   -ms-#{$prop}: #{$value};
   -o-#{$prop}: #{$value};
   #{$prop}: #{$value};
}

//div { @include css3-prefix(transform, scale3d(2.5, 2, 1.5)); }

//vertical-center
@mixin vertical-center {
   position: relative;
   top: 50%;
   -ms-transform: translateY(-50%);
   -webkit-transform: translateY(-50%);
   transform: translateY(-50%);
}

//arrow
@mixin arrow($direction: down, $size: 5px, $color: #555) {
   width: 0;
   height: 0;
   @if ($direction == left) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent; 
      border-right: $size solid $color;
   }
   @else if ($direction == right) {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent; 
      border-left: $size solid $color;
   }
   @else if ($direction == down) {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size solid $color;
   }
   @else {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
   }
}

// without arguments (default)
//div { @include arrow(); }

// with custom arguments
//div { @include arrow(up, 10px, #efefef); }


